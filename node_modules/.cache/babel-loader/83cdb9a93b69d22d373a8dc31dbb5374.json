{"ast":null,"code":"const UserReducer = (state, action) => {\n  switch (action.type) {\n    case \"GET_USERS_START\":\n      return {\n        users: [],\n        isFetching: true,\n        error: false\n      };\n\n    case \"GET_USERS_SUCCESS\":\n      return {\n        users: action.payload,\n        isFetching: false,\n        error: false\n      };\n\n    case \"GET_USERS_FAILURE\":\n      return {\n        users: [],\n        isFetching: false,\n        error: true\n      };\n\n    case \"CREATE_MOVIE_START\":\n      return { ...state,\n        isFetching: true,\n        error: false\n      };\n\n    case \"CREATE_MOVIE_SUCCESS\":\n      return {\n        movies: [...state.movies, action.payload],\n        isFetching: false,\n        error: false\n      };\n\n    case \"CREATE_MOVIE_FAILURE\":\n      return { ...state,\n        isFetching: false,\n        error: true\n      };\n\n    case \"UPLOAD_MOVIE_START\":\n      return { ...state,\n        isFetching: true,\n        error: false\n      };\n\n    case \"UPLOAD_MOVIE_SUCCESS\":\n      return {\n        movies: state.movies.map(movie => movie._id === action.payload._id && action.payload),\n        isFetching: false,\n        error: false\n      };\n\n    case \"UPLOAD_MOVIE_FAILURE\":\n      return { ...state,\n        isFetching: false,\n        error: true\n      };\n\n    case \"DELETE_MOVIE_START\":\n      return { ...state,\n        isFetching: true,\n        error: false\n      };\n\n    case \"DELETE_MOVIE_SUCCESS\":\n      return {\n        movies: state.movies.filter(movie => movie._id !== action.payload),\n        isFetching: false,\n        error: false\n      };\n\n    case \"DELETE_MOVIE_FAILURE\":\n      return { ...state,\n        isFetching: false,\n        error: true\n      };\n\n    default:\n      return { ...state\n      };\n  }\n};\n\n_c = UserReducer;\nexport default UserReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserReducer\");","map":{"version":3,"sources":["C:/Users/AURES/Desktop/youtube-react-admin/src/context/userContext/UserReducer.js"],"names":["UserReducer","state","action","type","users","isFetching","error","payload","movies","map","movie","_id","filter"],"mappings":"AAAA,MAAMA,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACnC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,iBAAL;AACI,aAAO;AACHC,QAAAA,KAAK,EAAE,EADJ;AAEHC,QAAAA,UAAU,EAAE,IAFT;AAGHC,QAAAA,KAAK,EAAE;AAHJ,OAAP;;AAKJ,SAAK,mBAAL;AACI,aAAO;AACHF,QAAAA,KAAK,EAAEF,MAAM,CAACK,OADX;AAEHF,QAAAA,UAAU,EAAE,KAFT;AAGHC,QAAAA,KAAK,EAAE;AAHJ,OAAP;;AAKJ,SAAK,mBAAL;AACI,aAAO;AACHF,QAAAA,KAAK,EAAE,EADJ;AAEHC,QAAAA,UAAU,EAAE,KAFT;AAGHC,QAAAA,KAAK,EAAE;AAHJ,OAAP;;AAKJ,SAAK,oBAAL;AACI,aAAO,EACH,GAAGL,KADA;AAEHI,QAAAA,UAAU,EAAE,IAFT;AAGHC,QAAAA,KAAK,EAAE;AAHJ,OAAP;;AAKJ,SAAK,sBAAL;AACI,aAAO;AACHE,QAAAA,MAAM,EAAE,CAAC,GAAGP,KAAK,CAACO,MAAV,EAAkBN,MAAM,CAACK,OAAzB,CADL;AAEHF,QAAAA,UAAU,EAAE,KAFT;AAGHC,QAAAA,KAAK,EAAE;AAHJ,OAAP;;AAKJ,SAAK,sBAAL;AACI,aAAO,EACH,GAAGL,KADA;AAEHI,QAAAA,UAAU,EAAE,KAFT;AAGHC,QAAAA,KAAK,EAAE;AAHJ,OAAP;;AAKJ,SAAK,oBAAL;AACI,aAAO,EACH,GAAGL,KADA;AAEHI,QAAAA,UAAU,EAAE,IAFT;AAGHC,QAAAA,KAAK,EAAE;AAHJ,OAAP;;AAKJ,SAAK,sBAAL;AACI,aAAO;AACHE,QAAAA,MAAM,EAAEP,KAAK,CAACO,MAAN,CAAaC,GAAb,CACHC,KAAD,IAAWA,KAAK,CAACC,GAAN,KAAcT,MAAM,CAACK,OAAP,CAAeI,GAA7B,IAAoCT,MAAM,CAACK,OADlD,CADL;AAIHF,QAAAA,UAAU,EAAE,KAJT;AAKHC,QAAAA,KAAK,EAAE;AALJ,OAAP;;AAOJ,SAAK,sBAAL;AACI,aAAO,EACH,GAAGL,KADA;AAEHI,QAAAA,UAAU,EAAE,KAFT;AAGHC,QAAAA,KAAK,EAAE;AAHJ,OAAP;;AAKJ,SAAK,oBAAL;AACI,aAAO,EACH,GAAGL,KADA;AAEHI,QAAAA,UAAU,EAAE,IAFT;AAGHC,QAAAA,KAAK,EAAE;AAHJ,OAAP;;AAKJ,SAAK,sBAAL;AACI,aAAO;AACHE,QAAAA,MAAM,EAAEP,KAAK,CAACO,MAAN,CAAaI,MAAb,CAAqBF,KAAD,IAAWA,KAAK,CAACC,GAAN,KAAcT,MAAM,CAACK,OAApD,CADL;AAEHF,QAAAA,UAAU,EAAE,KAFT;AAGHC,QAAAA,KAAK,EAAE;AAHJ,OAAP;;AAKJ,SAAK,sBAAL;AACI,aAAO,EACH,GAAGL,KADA;AAEHI,QAAAA,UAAU,EAAE,KAFT;AAGHC,QAAAA,KAAK,EAAE;AAHJ,OAAP;;AAKJ;AACI,aAAO,EAAE,GAAGL;AAAL,OAAP;AA5ER;AA8EH,CA/ED;;KAAMD,W;AAiFN,eAAeA,WAAf","sourcesContent":["const UserReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case \"GET_USERS_START\":\r\n            return {\r\n                users: [],\r\n                isFetching: true,\r\n                error: false,\r\n            };\r\n        case \"GET_USERS_SUCCESS\":\r\n            return {\r\n                users: action.payload,\r\n                isFetching: false,\r\n                error: false,\r\n            };\r\n        case \"GET_USERS_FAILURE\":\r\n            return {\r\n                users: [],\r\n                isFetching: false,\r\n                error: true,\r\n            };\r\n        case \"CREATE_MOVIE_START\":\r\n            return {\r\n                ...state,\r\n                isFetching: true,\r\n                error: false,\r\n            };\r\n        case \"CREATE_MOVIE_SUCCESS\":\r\n            return {\r\n                movies: [...state.movies, action.payload],\r\n                isFetching: false,\r\n                error: false,\r\n            };\r\n        case \"CREATE_MOVIE_FAILURE\":\r\n            return {\r\n                ...state,\r\n                isFetching: false,\r\n                error: true,\r\n            };\r\n        case \"UPLOAD_MOVIE_START\":\r\n            return {\r\n                ...state,\r\n                isFetching: true,\r\n                error: false,\r\n            };\r\n        case \"UPLOAD_MOVIE_SUCCESS\":\r\n            return {\r\n                movies: state.movies.map(\r\n                    (movie) => movie._id === action.payload._id && action.payload\r\n                ),\r\n                isFetching: false,\r\n                error: false,\r\n            };\r\n        case \"UPLOAD_MOVIE_FAILURE\":\r\n            return {\r\n                ...state,\r\n                isFetching: false,\r\n                error: true,\r\n            };\r\n        case \"DELETE_MOVIE_START\":\r\n            return {\r\n                ...state,\r\n                isFetching: true,\r\n                error: false,\r\n            };\r\n        case \"DELETE_MOVIE_SUCCESS\":\r\n            return {\r\n                movies: state.movies.filter((movie) => movie._id !== action.payload),\r\n                isFetching: false,\r\n                error: false,\r\n            };\r\n        case \"DELETE_MOVIE_FAILURE\":\r\n            return {\r\n                ...state,\r\n                isFetching: false,\r\n                error: true,\r\n            };\r\n        default:\r\n            return { ...state };\r\n    }\r\n};\r\n\r\nexport default UserReducer;"]},"metadata":{},"sourceType":"module"}